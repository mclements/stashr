
R version 2.4.1 Patched (2007-03-13 r40832)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Tests for Regression testing ##########################################
> ##########################################################################
> 
> library(stashR)
Loading required package: filehash
Simple key-value database (0.9-2 2007-03-12)
A Set of Tools for Administering SHared Repositories (0.2 2007-03-12)
> 
> wd <- getwd()
> dir <- file.path(wd,"testDir")
> 
> ##########################################################################
> ## Test objects of class 'remoteDB'
> ## Only run these tests if Internet connectivity is available
> 
> if(!is.null(nsl("www.biostat.jhsph.edu"))) {
+     myurl <- "http://www.biostat.jhsph.edu/MCAPS/data/"
+ 
+     ## create a 'remoteDB' object ##
+     db <- new("remoteDB", url= myurl, dir = dir, name= "MCAPS")
+     show(db)
+     show(class(db))
+     show(db@url)
+     show(db@dir)
+ 
+ 
+     ## other prelim steps necessary ##
+     ## dbCreate(db)
+ 
+     ## test the methods ##
+     dbList(db)
+     x <- dbFetch(db, "01073")
+     str(x)
+ 
+     try( dbFetch(db, "01004") )
+     try( dbDelete(db,"01073") )
+     try( dbInsert(db,key = "01004", value = 1) )
+ 
+     dbSync(db)
+     dir(file.path(db@dir, "data"))
+ 
+     dbSync(db, key = "01073")
+     dir(file.path(db@dir, "data"))
+ 
+     try( dbSync(db, key = c("01004","01073")) )
+     dir(file.path(db@dir, "data"))
+     dbExists(db,c("01073", "01004","55079"))
+ 
+     ## remove db@dir directory ##
+     unlink(db@dir, recursive = TRUE)
+ } else {
+     cat("UNABLE TO CONNECT TO www.biostat.jhsph.edu\n")
+ }
'remoteDB' database 'MCAPS'
[1] "remoteDB"
attr(,"package")
[1] "stashR"
[1] "http://www.biostat.jhsph.edu/MCAPS/data/"
[1] "/home/rpeng/projects/R-packages/stashR.Rcheck/tests/testDir"
trying URL 'http://www.biostat.jhsph.edu/MCAPS/data//data/01073.1'
Content type 'text/plain; charset=UTF-8' length 25588 bytes
opened URL
==================================================
downloaded 24Kb

trying URL 'http://www.biostat.jhsph.edu/MCAPS/data//data/01073.1.SIG'
Content type 'text/plain; charset=UTF-8' length 40 bytes
opened URL
==================================================
downloaded 40 bytes

'data.frame':	1461 obs. of  6 variables:
 $ date     :Class 'Date'  num [1:1461] 10592 10593 10594 10595 10596 ...
 $ pm25tmean: num  17.8 10.5 10.5  9.0 10.2 ...
 $ tmpd     : num  41.2 43.8 26.8 22.0 21.9 ...
 $ dptp     : num  27.7 41 14.7 8.9 6.6 21.8 47.3 50.6 30.7 16.2 ...
 $ rmtmpd   : num    NA   NA   NA 37.2 30.8 ...
 $ rmdptp   : num    NA   NA   NA 27.8 21.5 ...
Error in dbFetch(db, "01004") : key '01004' not in database
Error in dbDelete(db, "01073") : cannot delete from a 'remoteDB' database
Error in dbInsert(db, key = "01004", value = 1) : 
	cannot insert into a 'remoteDB' database
Error in .local(db, ...) : not all files referenced in the 'key' vector were previously downloaded, no files updated
> 
> ##########################################################################
> ## Test objects of class 'localDB'
> 
> wd <- getwd()
> dir <- file.path(wd,"testDir")
> 
> ## create a 'remoteDB' object ##
> dbLocal <- new("localDB", dir= dir, name= "MCAPS")
> show(dbLocal)
'localDB' database 'MCAPS'
> show(class(dbLocal))
[1] "localDB"
attr(,"package")
[1] "stashR"
> show(dbLocal@dir)
[1] "/home/rpeng/projects/R-packages/stashR.Rcheck/tests/testDir"
> 
> ## test the methods  ##
> dbInsert(dbLocal,key = "01004", value = 1:10)
> dbList(dbLocal)
[1] "01004"
> dbInsert(dbLocal,key = "01005", value = rep(5,10))
> dbInsert(dbLocal,key = "01006", value = matrix(1,5,4))
> dbList(dbLocal)
[1] "01004" "01005" "01006"
> 
> reposVersion(dbLocal)
[1] 3
> reposVersion(dbLocal) <- 1
> dbList(dbLocal)
[1] "01004"
> try( dbFetch(dbLocal, "01005") )
Error in dbFetch(dbLocal, "01005") : key '01005' not in database
> try( dbDelete(dbLocal, "01004") )
Error in dbDelete(dbLocal, "01004") : deleting key from previous version not allowed
> try( dbInsert(dbLocal, "01005", 1))
Error in dbInsert(dbLocal, "01005", 1) : inserting key into pervious version not allowed
> 
> reposVersion(dbLocal) <- -1
> dbList(dbLocal)
[1] "01004" "01005" "01006"
> dbFetch(dbLocal, "01005")
 [1] 5 5 5 5 5 5 5 5 5 5
> 
> dbFetch(dbLocal, "01004")  
 [1]  1  2  3  4  5  6  7  8  9 10
> try( dbFetch(dbLocal, "01073") )
Error in dbFetch(dbLocal, "01073") : key '01073' not in database
> dbFetch(dbLocal, "01005")
 [1] 5 5 5 5 5 5 5 5 5 5
> dbDelete(dbLocal,"01004")
> dbList(dbLocal)	
[1] "01005" "01006"
> try( dbDelete(dbLocal,"01004") )
Error in dbDelete(dbLocal, "01004") : key '01004' not in current version
> dbDelete(dbLocal,"01005")
> dbList(dbLocal)
[1] "01006"
> dbExists(dbLocal,key="01004")
[1] FALSE
> dbExists(dbLocal,key="01006")
[1] TRUE
> 
> ## Weird object names
> dbInsert(dbLocal, "x.1", 1)
> dbInsert(dbLocal, "x.1", 2)
> dbInsert(dbLocal, "x.2", 3)
> dbInsert(dbLocal, "y.1.1.1", 4)
> 
> dbList(dbLocal)
[1] "01006"   "x.1"     "x.2"     "y.1.1.1"
> dbFetch(dbLocal, "x.2")
[1] 3
> 
> 
> dbUnlink(dbLocal)
> 
